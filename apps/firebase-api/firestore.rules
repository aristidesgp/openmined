rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    function getUserData(user) {
      return get(/databases/$(database)/documents/users/$(user));
    }

    function isAdmin(user) {
      return exists(/databases/$(database)/documents/admins/$(user));
    }

    function isMentor(user) {
      return exists(/databases/$(database)/documents/mentors/$(user));
    }

    function isLoggedIn() {
      return request.auth != null;
    }

    function isSameUser(user) {
      return isLoggedIn() && request.auth.uid == user;
    }

    // Admin-level mentors metadata
    match /mentors/{mentor} {
      allow read: if isSameUser(mentor) && isMentor(mentor);
      allow write: if false;
    }

    match /users/{user} {
      // Anyone can read
      allow read;

      // Owner can only write all fields except "is_mentor"
      allow write: if isSameUser(user) && !('is_mentor' in incomingData())

      // Only owner can read/write
      match /private/{privateUserVar} {
        allow read, write: if isSameUser(user)
      }

      // Only for mentors
      match /reviews/{review} {
        // TODO: Students who don't have a role of mentor cannot create records on the reviews subcollection
        // TODO: Students who are also mentors cannot review their own submission
        // TODO: Students who are also mentors cannot create a review for a course they are not allowed to mentor (mentors can only review courses they're allowed to review)
        // TODO: Students who are also mentors cannot edit or delete a review, only read and create
        allow read: if isSameUser(user)
        allow create, update: if isSameUser(user)
      }

      match /courses/{course} {
        function hasStartedCourse(u) {
          return (started_at in u) && !!u.started_at;
        }

        function hasCompletedCourse(u) {
          return hasStartedCourse(u) && !!u.completed_at
        }

        // TODO: Mentor will need to be able to edit the submissions array with the status and reviewed_at time (project->part->submissions)
        // TODO: Mentors should always be able to read any user that they are assigned to review
        // TODO (MAYBE): Student should not be able to mark their submissions with the data of "status" or "reviewed_at"
        allow read, write: if isSameUser(user)

        // These are submissions of a student
        // But remember, this DOES NOT affect how a mentor would read this submission
        match /submissions/{submission} {
          allow read, create: if isSameUser(user)
          allow update: if get(existingData().mentor).id == request.auth.uid;
          allow delete: if false;
        }

        match /feedback/{conceptOrLesson} {
          allow read, write: if isSameUser(user)
        }
      }
    }

    // This allows for the collectionGroup queries to be read by mentors
    match /{path=**}/submissions/{submission} {
      // TODO: The only users who should be able to hit this endpoint must be mentors (the code below should work, but needs testing)
      // NOTE: This should only be triggered from line 66 of the users/dashboard/Mentor.tsx file
      allow read: if isLoggedIn() && getUserData(request.auth.uid).data.is_mentor;
      allow read: if false;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
