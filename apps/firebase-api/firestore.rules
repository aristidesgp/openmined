rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    function getUserData(user) {
      return get(/databases/$(database)/documents/users/$(user));
    }

    function isAdmin(user) {
      return exists(/databases/$(database)/documents/admins/$(user));
    }

    function isMentor(user) {
      return exists(/databases/$(database)/documents/mentors/$(user));
    }

    function isLoggedIn() {
      return request.auth != null;
    }

    function isSameUser(user) {
      return isLoggedIn() && request.auth.uid == user;
    }

    match /mentors/{mentor} {
      allow read: if isSameUser(mentor) && isMentor(mentor);
    }

    match /users/{user} {
      allow read;
      allow write: if isSameUser(user)

      // *-----*
      // NOTE: If you're writing security rules, MAKE SURE that you fully understand the data model posted in apps/courses/src/DATA-MODEL.md
      // NOTE: All rules that are written must have at least one intentionally passing and one intentionally failing test... the more tests, the better!
      // NOTE: Please use the Firebase emulator for running tests
      // *-----*

      // TODO: Cannot write to "is_mentor" field on user object

      match /private/{privateUserVar} {
        allow read, write: if isSameUser(user)
      }

      match /courses/{course} {
        allow read, write: if isSameUser(user)

        // TODO: Cannot complete course if there are incomplete concepts, lessons, or projects
        // TODO: Cannot start or complete lesson without previous lessons being completed
        // TODO: Cannot start or complete concept without previous concepts (and also previous lessons) being completed
        // TODO: Cannot start project without completing previous lessons and all concepts therein
        // TODO: Cannot start or complete project or set the project status without all previous parts being passed OR without one part being failed without any remaining attempts
        // TODO: Student cannot complete a project part or set the project part status, this can only be done by their mentor and requires either the part being passed OR with the part being failed without any remaining attempts
        // TODO: Student cannot write to their own reviews array on the project part
        // TODO: Cannot "restart" or "recomplete" any course, lesson, concept, project, or project part (these values are immutable)

        match /submissions/{submission} {
          allow read, create: if isSameUser(user)
          // TODO: Nobody may edit or delete a submission
          // TODO: Deny read unless it's the same user OR if it's an assigned mentor (if possible)
        }

        // TODO: Create a reviews subcollection
        // TODO: Students who don't have a role of mentor cannot create records on the reviews subcollection
        // TODO: Students who are also mentors cannot create a review for a course they are not allowed to mentor (mentors can only review courses they're allowed to review)
        // TODO: Students who are also mentors cannot edit or delete a review, only read and create
        // TODO: The only students who are allowed to read a review should be a) the mentor who created the review and b) the student whom the review was written for

        match /feedback/{conceptOrLesson} {
          allow read, write: if isSameUser(user)
        }
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
